generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Brand {
  id             Int       @id @default(autoincrement())
  name           String    @unique @db.VarChar(256)
  details        String?   @db.VarChar(256)
  images         String[]
  readyForOnline Boolean   @default(false) @map("ready_for_online")
  Product        Product[]

  @@map("brand")
}

model Category {
  id                Int                 @id @default(autoincrement())
  name              String              @unique @db.VarChar(256)
  details           String?             @db.VarChar(256)
  images            String[]
  isPrimaryCategory Boolean             @default(false) @map("is_primary_category")
  readyForOnline    Boolean             @default(false) @map("ready_for_online")
  Product           Product[]
  SecondaryCategory SecondaryCategory[]

  @@map("category")
}

model Color {
  id             Int      @id @default(autoincrement())
  color          String   @db.VarChar(48)
  details        String?  @db.VarChar(256)
  productId      Int      @map("product_id")
  quantity       Int      @default(0)
  price          Float?
  images         String[]
  readyForOnline Boolean  @default(false) @map("ready_for_online")
  Product        Product  @relation(fields: [productId], references: [id])

  @@map("color")
}

model Size {
  id             Int      @id @default(autoincrement())
  size           String   @db.VarChar(48)
  details        String?  @db.VarChar(256)
  productId      Int      @map("product_id")
  quantity       Int      @default(0)
  price          Float?
  images         String[]
  readyForOnline Boolean  @default(false) @map("ready_for_online")
  Product        Product  @relation(fields: [productId], references: [id])

  @@map("size")
}

model Product {
  id                Int                 @id @default(autoincrement())
  createdAt         DateTime            @default(now()) @map("created_at")
  deletedAt         DateTime?           @map("deleted_at")
  name              String              @db.VarChar(256)
  primaryCategoryId Int                 @map("primary_category_id")
  brandId           Int                 @map("brand_id")
  details           Json
  quantity          Int                 @default(0)
  price             Float?
  images            String[]
  color             String?
  size              String?
  readyForOnline    Boolean             @default(false) @map("ready_for_online")
  Color             Color[]
  Brand             Brand               @relation(fields: [brandId], references: [id])
  Category          Category            @relation(fields: [primaryCategoryId], references: [id])
  SecondaryCategory SecondaryCategory[]
  Size              Size[]

  @@map("product")
}

model SecondaryCategory {
  productId  Int      @map("product_id")
  categoryId Int      @map("category_id")
  Category   Category @relation(fields: [categoryId], references: [id])
  Product    Product  @relation(fields: [productId], references: [id])

  @@unique([productId, categoryId])
  @@map("secondary_category")
}

model User {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now()) @map("created_at")
  deletedAt   DateTime?   @map("deleted_at")
  firstName   String      @map("first_name")
  middleName  String?     @map("middle_name")
  lastName    String      @map("last_name")
  email       String      @unique
  accountType AccountType @default(USER) @map("account_type")
  lastLogInAt DateTime?   @map("last_log_in_at")

  @@map("user")
}

enum AccountType {
  USER
  AGENT
  ADMIN
}
